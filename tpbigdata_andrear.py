# -*- coding: utf-8 -*-
"""TPBigData-AndreaR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YG9pSivtvwACKx8Hr1xCuWkfp-_lfsyc

#IMPORTS
"""

!pip install config

from textblob import TextBlob
from wordcloud import WordCloud
import tweepy
import numpy as np
import re
import matplotlib.pyplot as plt
import pandas as pd

"""#CREDENDIALES"""

TWITTER_CONSUMER_KEY = 'e27sd02R39EIsSHfrTUCiOwXT'
TWITTER_CONSUMER_SECRET = 'X0K7qJC7lZ9An1NXWJ3yYijOp4tAFPWcd3OjcBP15djPe9m5KZ'
TWITTER_ACCESS_TOKEN = '175984347-MCv5cbRKRBxXOFKDUfsQVtGhuPy42aRDn53UWP4L'
TWITTER_ACCESS_TOKEN_SECRET = 'XMEe25XGwoeozruLf9Y1zK5wYlTup9U0xLHLG4BT3JffE'

"""#AUTENTICACION



"""

auth = tweepy.OAuthHandler(TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET)
auth.set_access_token(TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_TOKEN_SECRET)
api = tweepy.API(auth,wait_on_rate_limit=True)

"""#EXTRACCION"""

userinput= input("Que twits son de tu interes? ")
num_tweets = int(input("Cuantos twits desea? "))

tweets_list = tweepy.Cursor(api.search, q=userinput, lang='es').items(num_tweets)
output = []
for tweet in tweets_list:
    text = tweet.text
    favourite_count = tweet.favorite_count
    retweet_count = tweet.retweet_count
    created_at = tweet.created_at
    author = tweet.user.screen_name
    line = {'tweet' : text, 'favourite_count' : favourite_count, 'retweet_count' : retweet_count, 'created_at' : created_at,"autor":author}
    output.append(line)

"""#DATAFRAME

"""

df = pd.DataFrame(output)
df.to_csv('output.csv')
df

"""
#ANALISIS


"""

#definir una funcion para limpiar el texto
def remove_emojis(text):
    emoj = re.compile("["
        u"\U0001F600-\U0001F64F"  # emoticons
        u"\U0001F300-\U0001F5FF"  # symbols & pictographs
        u"\U0001F680-\U0001F6FF"  # transport & map symbols
        u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
        u"\U00002500-\U00002BEF"  # chinese char
        u"\U00002702-\U000027B0"
        u"\U00002702-\U000027B0"
        u"\U000024C2-\U0001F251"
        u"\U0001f926-\U0001f937"
        u"\U00010000-\U0010ffff"
        u"\u2640-\u2642" 
        u"\u2600-\u2B55"
        u"\u200d"
        u"\u23cf"
        u"\u23e9"
        u"\u231a"
        u"\ufe0f"  # dingbats
        u"\u3030"
                      "]+", re.UNICODE)
    return re.sub(emoj, '', text)

def cleanTxt(text):
 text = re.sub('\s([@#][\w_-]+)|@[A-Za-z0-9]+|@([a-zA-Z0-9_]{1,50})', '', text) #Removing @mentions
 text = re.sub('RT:[\s]+', '', text) # Removing RT
 text = re.sub('#', '', text) # Removing '#' hash tag
 text = re.sub('https?:\/\/\S+', '', text) # Removing hyperlink
 text = re.sub("\n",'',text) # Remove newlines
 text = re.sub(r'[^\w\s]', '', text) #Remove punctuations
 text = remove_emojis(text) 

 return text


# Clean the tweets
df['tweet'] = df['tweet'].apply(cleanTxt)

# Show the cleaned tweets
df

# crear la funcion para obtener la subjectividad
def getSubjectivity(text):
   return TextBlob(text).sentiment.subjectivity

# Crear la funcion para obtener la polaridad
def getPolarity(text):
   return  TextBlob(text).sentiment.polarity


# Crear dos nuevas columnas 'Subjectividad' & 'Polaridad'
df['subjectividad'] = df['tweet'].apply(getSubjectivity)
df['polaridad'] = df['tweet'].apply(getPolarity)

# Show the new dataframe with columns 'Subjectivity' & 'Polarity'
df

"""#ANALISIS DE SENTIMIENTO

"""

def getAnalysis(score):
  if score < 0:
    return 'Negativo'
  elif score == 0:
    return 'Neutral'
  else:
    return 'Positivo'

df['analisis'] = df['polaridad'].apply(getAnalysis)
# Show the dataframe
df

"""GRAFICO"""

# Get mean sentiment

df["analisis"].value_counts().mean()

# Plotting and visualizing the counts
plt.title('Sentiment Analysis')
plt.xlabel('Sentiment')
plt.ylabel('Counts')
df['analisis'].value_counts().plot(kind = 'bar')
plt.show()

df.to_csv("archivo.csv")